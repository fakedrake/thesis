#+TITLE:       Makefiles
#+AUTHOR:      Chris Perivolaropoulos
#+EMAIL:       cperivol@csail.mit.edu
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:    en
#+OPTIONS:     H:2 num:t toc:t \n:nil @:t ::t |:t ^:t f:t TeX:t
#+STARTUP:     showall
#+MACRO:       ref


The most important part of wikipedia-mirror automation is the =make=
build system{{{ref}}}. Below is an outline of the most basic features
of make that constitute it an excellent candidate for automating
processes like this.

Make is a build system whereby one can declare required files
(targets), dependencies for them, and a set of shell commands that
will build those targets. Each target is essentially a finite state
machine with two states:

- A file that exists and is up to date with its dependencies and
- A file that either doesn't exist or its modification date is older
  than that of at leas one of its dependencies.

And a sequence of shell commands to transition from the latter to the
former state.

For example, save the following as =Makefile= in a project that
contains the files =foo.c=, =foo.h=, =bar.c= and =bar.h=:

#+BEGIN_SRC makefile
  foo.o: foo.c foo.h
	  gcc foo.c -c -o foo.o

  bar.o: bar.c
	  gcc bar.c -c -o bar.o

  foobar: foo.o bar.o
	  gcc foo.o bar.o -o foobar
#+END_SRC

this means that to build =foobar= we need =foo.o= and =bar.o=. And
to build =foo.o= and =bar.o= we need =foo.c= and =foo.h=, and
=bar.c= and =bar.h= respectively. We also provide commands for
building =foo.o=, =bar.o= and =foobar=, which are

- =gcc foo.c -c -o foo.o=
- =gcc bar.c -c -o bar.o=
- and =gcc foo.o bar.o -o foobar=

respectively. Notice that there are no rules for the =.c= and =.h=
files. That is because =make= should fail if they are not present. So
if we run =make foobar=, make will check for =foobar='s existence and
modification date. If foobar is missing or its modification date is
earlier than its dependencies' (ie =foo.o= and =bar.o=) it will be
rebuilt. If any dependencies are missing the same logic is applied to
that. This way if we build foobar once, and then edit =bar.c= and
rerun =make foobar=, =make= will recursively deduce that

- =bar.o= is out of date with respect to its dependency =bar.c=
- When =bar.o= is rebuilt it now has a more recent modification date
  than =foobar= and therefore the latter is out of date with respect
  to its dependency =bar.o= so it needs to be rebuilt.

This way make can infer a near optimal strategy for building each time
the minimum amount of required targets.

Now that we made the basic logic of =make= clear let's dive into some
basic features that make our life easier.

* Phony targets

  Some tasks do not result in a file and they need to be run every
  time =make= encounters them in the dependency tree. For this we
  have the special keyword =.PHONY:=. Here is an example.

  #+BEGIN_SRC makefile
    .PHONY:
    clean:
    	rm -rf *
  #+END_SRC

  This tells make that no file named =clean= will emerge from
  running =rm -rf *=, and also that even if an up-to-date file named
  =clean= exists, this target is to be run regardless.

  It is worth noting that phony dependencies will always render the
  dependent target out-of-date. For example:

  #+BEGIN_SRC makefile
    .PHONY:
    say-hello:
    	echo "hello"

    test.txt: say-hello
    	touch test.txt
  #+END_SRC

  When =touch test.txt= will be run *every* time we run =make
  test.txt= simply because =make= can not be sure that the phony
  target =say-hello= did not change anything important for
  =test.txt=. For this reason phony targets are only meant for user
  facing tasks.

* Variables

  =makefiles= can have variables defined in a variety of ways. Some
  cases that are being made use of in wikipedia-mirror are
  presented below.


** Recursively expanded variables

   #+BEGIN_SRC makefile
    OBJCETS = foo.o bar.o

    show:
        echo $(OBJECTS)
   #+END_SRC

   Running =make show= will print =foo.o bar.o= to the console. All
   variables are substituted for their value by wrapping the variable
   name in parentheses and prefixing the dollar sign (=$=). Makefile
   variables have no type, reference to a variable is equivalent to
   simple string substitution, much like it is in unix shell scripting.

   Variables defined using a simple equal =\== sign are recursively
   expanded. This means that after the variable name is substituted
   for the variable content a recursive process keeps expanding
   emergent variables. This can make variable expansion a very
   powerful tool. For example:

   #+BEGIN_SRC makefile
     library = foo

     foo-libs = -lfoo
     foo-includes = -I./include/foo

     bar-libs = -lbar
     bar-includes = -I./include/bar

     libs = $($(library)-libs)
     includes = $($(library)-includes)

     waz:
     	gcc waz.c $(includes) $(libs)
   #+END_SRC

   To demonstrate:

   #+BEGIN_SRC sh
     $ make --just-print
     gcc waz.c -I./include/foo -lfoo
   #+END_SRC

   The expansion that took place step by step are

   #+BEGIN_SRC makefile
     gcc waz.c $(includes) $(libs)
     gcc waz.c $($(library)-includes) $($(library)-libs)
     gcc waz.c $(foo-includes) $(foo-libs)
     gcc waz.c -I./include/foo -lfoo
   #+END_SRC

   Notice how variable names were themselves constructed.

   Variables can also be defined at the command so in this
   particular example we could easily switch to the =bar= library:

   #+BEGIN_SRC sh
     $ make --just-print library=bar
     gcc waz.c -I./include/bar -lbar
   #+END_SRC

** Simple variables

   Sometimes it is not desirable for variables to be expanded
   indefinitely:

   #+BEGIN_SRC makefile
     kurma = the world $(support1)
     animal1 = four elephants
     animal2 = tortoise
     support1 = supported by $(animal1) $(support2)
     support2 = supported by a $(animal2) $(support2)

     all:
     	echo $(kurma)
   #+END_SRC

   Here we try to recursively print an infinite message.

   #+BEGIN_SRC sh
     $ make --just-print
     Makefile:5: *** Recursive variable `support2' references itself (eventually).  Stop.
   #+END_SRC

   the variable system of make is total{{{ref}}}, that is to say
   variable evaluation can be recursive but it needs to terminate. We
   can circumvent this by using the ~:\=~ assignment operator.

   #+BEGIN_SRC makefile
     kurma = the world $(support1)
     animal1 = four elephants
     animal2 = tortoise
     support1 = supported by $(animal1) $(support2)
     support2 := supported by a $(animal2) $(support2)

     all:
        echo $(kurma)
   #+END_SRC

   And when we run make we get:

   #+BEGIN_SRC sh
     make --just-print
     echo the world supported by four elephants supported by a tortoise
   #+END_SRC

   basically =support2= is removed from scope when the =support2=
   itself is substituted.

** Automatic variables

   Makefile also defines some contextual variables that are
   defined. The automatic variables defined by gnu make are the
   following

   - =$@=: The file name of the target of the rule. If the target is
     an archive member, then =$@= is the name of the archive
     file. In a pattern rule that has multiple targets (see
     Introduction to Pattern Rules), =$@= is the name of
     whichever target caused the rule's recipe to be run.
   - =$%=: The target member name, when the target is an archive
     member. See Archives. For example, if the target is
     foo.a(bar.o) then =%%= is bar.o and =$@= is
     foo.a. =$%= is empty when the target is not an archive member.
   - =$<=: The name of the first prerequisite. If the target got its
     recipe from an implicit rule, this will be the first prerequisite
     added by the implicit rule (see Implicit Rules).
   - =$?=: The names of all the prerequisites that are newer than
     the target, with spaces between them. For prerequisites which
     are archive members, only the named member is used (see
     Archives).
   - =$^=: The names of all the prerequisites, with spaces between
     them. For prerequisites which are archive members, only the
     named member is used (see Archives). A target has only one
     prerequisite on each other file it depends on, no matter how
     many times each file is listed as a prerequisite. So if you
     list a prerequisite more than once for a target, the value of
     $^ contains just one copy of the name. This list does not
     contain any of the order-only prerequisites; for those see the
     =$|= variable, below.
   - =$+=: This is like =$^=, but prerequisites listed more
     than once are duplicated in the order they were listed in the
     makefile. This is primarily useful for use in linking commands
     where it is meaningful to repeat library file names in a
     particular order.
   - =$|= The names of all the order-only prerequisites, with spaces
     between them.
   - =$*=: The stem with which an implicit rule matches (see How
     Patterns Match). If the target is =dir/a.foo.b= and the target
     pattern is =a.%.b= then the stem is =dir/foo=. The stem is useful
     for constructing names of related files. In a static pattern
     rule, the stem is part of the file name that matched the =%= in
     the target pattern. In an explicit rule, there is no stem; so
     =$*= cannot be determined in that way. Instead, if the target
     name ends with a recognized suffix (see Old-Fashioned Suffix
     Rules), =$*= is set to the target name minus the suffix. For
     example, if the target name is =foo.c=, then =$*= is set to
     =foo=, since =.c= is a suffix. GNU make does this bizarre thing
     only for compatibility with other implementations of make. You
     should generally avoid using =$*= except in implicit rules or
     static pattern rules. If the target name in an explicit rule
     does not end with a recognized suffix, =$*= is set to the empty
     string for that rule.


* Functions

  Functions are similar to variables in that they also expand into
  strings. The only difference is that they accept parameter
  variables.

  #+BEGIN_SRC makefile
    greet = "Hello $1 (from $2)"
    john-greets = $(call greet,$1,John)

    .PHONY:
    all:
  	  @echo $(call john-greets,Chris)
  #+END_SRC

  And the output here is

  #+BEGIN_SRC sh
    $ make
    Hello Chris (from John)
  #+END_SRC
