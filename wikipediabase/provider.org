#+TITLE:       Provider acquirer model
#+AUTHOR:      Chris Perivolaropoulos
#+DATE:        Sunday 21 February 2016
#+EMAIL:       cperivol@csail.mit.edu
#+DESCRIPTION: The provider/acquirer model and an example
#+KEYWORDS:
#+LANGUAGE:    en
#+OPTIONS:     H:2 num:t toc:t \n:nil @:t ::t |:t ^:t f:t TeX:t
#+STARTUP:     showall


  WikipediaBase attempts to be modular and extensible. To accomplish
  this it is often useful to multiplex multiple sources of the same
  type of data resource. This is particularly useful when accessing
  heuristic methods like classifier. To promote modularity and to
  avoid hard dependencies the provider/acquirer model was created:

  A =Provider= is an object through which we can access resources that
  are stored in a key-value fashion. The =Provider= class offers
  facilities like decorators to make this provision easy. An
  =Acquirer= has transparent access to the resources of multiple
  =Providers= as if they were a single key value store. This pattern
  is most notably used for the =KnowledgeBase= to provide the
  =Frontend= with the way of accessing resources.


* Example

  We demonstrate the pattern with an example: we will embed a small
  lisp{{{ref}}} dialect into python that we will call =p-lisp= (for
  =python lisp=, =provider-lisp= and =poor-lisp=)

  #+BEGIN_SRC python
    from wikipediabase.provider import Provider, Acquirer, provide


    class EvalContext(Acquirer):
        def __init__(self, closures):
            super(EvalContext, self).__init__(closures)
            self.closures = closures

        def __call__(self, _ctx, expr):
            if isinstance(expr, list):
                # Handle quotes
                if expr[0] is 'quote':
                    return expr[1]

                # Call the lambda
                fn = self(_ctx, expr[0])
                return fn(self, *[self(_ctx, e) for e in expr[1:]])

            if isinstance(expr, basestring) and expr in self.resources():
                return self(_ctx, self.resources()[expr])

            return expr


    class Lambda(Acquirer):
        def __init__(self, args, expr, env):
            # Get your symbols from all the available closures plus an
            # extra for local variables
            super(Lambda, self).__init__([env] + [Symbols()])
            self.args = args
            self.expr = expr

        def __call__(self, _ctx, *args):
            # Add another closure to the list
            arg_provider = Provider();
            for s, v in zip(self.args, args):
                arg_provider.provide(s, v)

            # Build an eval context and run it
            ctx = EvalContext([arg_provider, Provider(self.resources())])
            return [ctx(ctx, e) for e in self.expr][-1]

    class Symbols(Provider):
        @provide('setq')
        def setq(self, ctx, symbol, val):
            self.provide(symbol, val)

    class Builtins(Provider):
        @provide('lambda')
        def _lambda(self, ctx, args, *body):
            return Lambda(args, list(body), Provider(ctx.resources()))

        @provide('if')
        def _if(self, ctx, proposition, then, _else):
            if ctx(ctx, proposition):
                return ctx(ctx, then)
            else:
                return ctx(ctx, _else)

    GLOBAL_EVAL = EvalContext([Builtins(), Symbols()])
  #+END_SRC

  =p-lisp= supports:

  - lambdas
  - A global symbol table
  - lexical scoping
  - conditionals
  - Quoted literals

  It really is very far from being remotely close to a usable
  language but it can do some cute tricks:

  We can evaluate python types:

  #+BEGIN_SRC python
    >>> GLOBAL_EVAL({}, 1)
    1
    >>> GLOBAL_EVAL({}, True)
    True
    >>> GLOBAL_EVAL({}, "hello")
    'hello'
    >>> GLOBAL_EVAL({}, list)
    <type 'list'>
  #+END_SRC

  We can define lambdas and call them. The following is equivalent to
  \((\lambda a. a) 1\), which should evaluate to =1=:

  #+BEGIN_SRC python
    >>> GLOBAL_EVAL({}, [["lambda", ['quote', ['a']], 'a'], 1])
    1
  #+END_SRC

  Our little lisp is not pure since we have a global symbol
  table. The best way to sequence expressions is to wrap them all up
  in a =lambda= and then evaluate that:

  #+BEGIN_SRC python
    >>> GLOBAL_EVAL({}, [['lambda', ['quote', []], ['setq', 'b', 2], 'b']])
    2
  #+END_SRC

  The attentive reader may have noticed the quoted list for lambda
  arguments. The reason is that we do not want the list to be
  evaluated.

  Back on our main subject, in =p-lisp= symbols get values from 3
  different sources:

  - The local closure
  - The arguments of the lambda
  - Built-in functions

  All the above are abstracted using the provider-acquirer model. At
  each point a different =EvaluationContext= is responsible for
  evaluating and each =EvaluationContext= has access to its known
  symbols via an array of providers that are abstracted using the
  discussed model.
