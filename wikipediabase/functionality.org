#+TITLE:       WikipediaBase Functionality
#+AUTHOR:      Chris Perivolaropoulos
#+EMAIL:       cperivol@csail.mit.edu
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:    en
#+OPTIONS:     H:2 num:t toc:t \n:nil @:t ::t |:t ^:t f:t TeX:t
#+STARTUP:     showall

# Lifted from the wiki

As far as the ontology that START assumes for WikipediaBase, each
infobox type corresponds to a START class and each valid infobox
attribute is a START class attribute. Furthermore all such classes
inherit from the =wikipediabase-term= START class which supports the
following attributes:

- =IMAGE-DATA= : The infobox image
- =SHORT-ARTICLE= : A short version of the article, typically the
  first paragraph
- =URL= : The url of the article
- =COORDINATES= : Wherever it makes sense, the coordinates of the
  concept of the article
- =PROPER= : Whether the article refers to a proper noun (eg The
  Beatles, United States etc)
- =NUMBER= : =#t= if the concept of the article refers to many things,
  =#f= if it refers to one.

All commands and return values are encoded into s-expressions.

* get

  Given a class, object name, and typed attribute, return the value
  as a lisp-readable form.

  Valid attribute typecodes are

  - =:code= for an attribute name as in infobox wiki markup format
  - and =:rendered= for an attribute name in the rendered form of the
    infobox.


** Types

   All return values of =get= are typed. Below is a comprehensive list
   of all the supported types.

*** =:HTML=

    A string suitable for rendering as paragraph-level HTML. The
    string must be escaped for lisp, meaning double quoted, and with
    double quotes and backslashes escaped with backslashes. For
    example:


*** =:YYYYMMDD=

    Parsed dates are represented in the format =[-]<4 digit year><2
    digit month><2 digit day>=. Unparsable dates are represented as
    =:html= types

    #+BEGIN_SRC lisp
      (get "wikibase-person" "Barack Obama" (:ID "BIRTH-DATE"))
      => ((:yyyymmdd 19610804))

      (get "wikibase-person" "Julius Caesar" (:ID "BIRTH-DATE"))
      => ((:YYYYMMDD -1000713))
    #+END_SRC


*** =:CALCULATED=

    The type of calculated properties based on characteristics of the
    article, e.g., /GENDER/ and /NUMBER/. See below under Special
    Attributes for a complete list of calculated attributes.

*** =:CODE=

    Deprecated, old synonym for =:HTML=.

*** =:STRING=

    Deprecated, old synonym for =:HTML=.

** Special Attributes

   Besides the attributes that are fetched as attributes of the
   infobox, the rest of the available attributes are special in that
   they are calculated from the contents of the article. They are also
   special in that they are hardocoded, ie the value of the attribute
   is calculated, not the attribute itself. These attributes should be
   specific to =wikibase-term=, =wikibase-person=, and
   =wikipedia-paragraphs=.

*** =SHORT-ARTICLE=, =wikibase-term=

    The first paragraph of the article, or if the first paragraph is
    shorter than 350 characters, then the value of =short-article= is
    the the first paragraphs such that the sum of the rendered
    characters is at least 350.

*** =URL=, =wikibase-term=

    The URL of the article as =((:url URL))=

*** =IMAGE-DATA=, =wikibase-term=

    A list of URLs for images in the article content (excludes images
    that are in the page but outside of the article content). The
    "best" image should be the first URL in the list; if there is a
    picture at the top of the infobox, this is considered to be the
    best image, or otherwise the first image that appears anywhere in
    the article. If there is no caption, the caption value should be
    omitted, e.g., =((0 "Harimau_Harimau_cover.jpg"))= rather than
    =((0 "Harimau_Harimau_cover.jpg" ""))=.

*** =COORDINATES=, =wikibase-term=

    Computed from latitude and longitude attributes given in the
    article header or, if none can be found, the infobox. The value is
    a list of the latitude and longitude, e.g., =((:coordinates
    latitude longitude))=

    #+CAPTION: An example of coordinates in the header
    #+NAME:   fig:coordinate-example
    #+attr_latex: :placement [H] :width \textwidth
    [[./black-sea.png]]

*** =BIRTH-DATE=, =wikibase-person=

    Searches in order using =dateparser= and type =:yyyymmdd= and
    relying on the first valid occurrence of a date in the following:

    - The infobox attribute =birth date=
    - In the first sentence of the article look for =born {date}=
    - In the first parentheses of the article look for a date range
      and use the lower bound of the range.

    If a date is detected but cannot be parsed then the attribute's
    value has type =:html=

*** =DEATH-DATE=, =wikibase-person=

    Fetched similarly to =BIRTH-DATE=. Returns the same value types as
    BIRTH-DATE, except if the person is still alive, throws an error
    with the reply "Currently alive".

*** =GENDER=, =wikibase-person=

    Computed from the page content based on heuristics such as the
    number of times that masculine vs. feminine pronouns appear. Valid
    values are =:masculine= and =:feminine=.

*** =NUMBER=, =wikibase-term=

    Computed from the page content based on heuristics such as number
    of times the page's title appears plural. Valid for all
    objects. Returns =#t= if many, =#f= if one.

*** =PROPER=, =wikibase-term=

    Computed from the page content based on heuristics such as
    number of times the page's title appears capitalized when not at
    the start of a sentence. Valid for all objects. Returns =#t= if
    proper and =#f= if not.

* =get-classes=

  Given an object name, return a list of all classes to which the
  object belongs. Class names are conventionally given in lower case,
  but this is not an absolute requirement. E.g.,

  #+BEGIN_SRC lisp
    (get-classes "Cardinal (bird)")
    => ("wikibase-term" "wikipedia-paragraphs" "wikipedia-taxobox")

    (get-classes "Hillary Rodham Clinton")
    => ("wikibase-term"
    "wikipedia-paragraphs"
    "wikibase-person"
    "wikipedia-officeholder"
    "wikipedia-person")
  #+END_SRC


* =get-attributes=

  Given a class name, return a list of all attributes that the class
  implements. If possible also provide the typecode of the value type
  and the human readable form, ie the rendered attribute from the
  wikipedia infobox

  #+BEGIN_SRC lisp
    (get-attributes "wikipedia-officeholder" "Barack Obama")
    => ((:CODE "TERM_END3" :VALUE :YYYYMMDD) ...)
  #+END_SRC

* =sort-symbols=

  Given any number of symbols =sort-symbols= will sort them into
  subsets by the length of the associated article. E.g.,

  #+BEGIN_SRC lisp
    (sort-symbols  "Obama (surname)" "Barack Obama")
    => (("Barack Obama") ("Obama (surname)"))
  #+END_SRC

* =sort-symbols-named=

  =sort-symbols-named= takes a synonym and any number of symbols and
  sorts the symbols into subsets; if any symbol name is the same as
  the synonym, it and its subset are sorted to the front. E.g.

  #+BEGIN_SRC lisp
    (sort-symbols-named
     "cake"
     "Cake (TV series)"
     "Cake (firework)"
     "Cake (film)"
     "Cake (drug)"
     "Cake"
     "Cake (band)"
     "Cake (advertisement)"
     "The Cake")
    => (("Cake")
    ("Cake (band)")
    ("Cake (advertisement)")
    ("Cake (TV series)")
    ("The Cake")
    ("Cake (film)")
    ("Cake (firework)")
    ("Cake (drug)"))
  #+END_SRC
