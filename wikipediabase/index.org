#+TITLE:       WikipediaBase
#+AUTHOR:      Chris Perivolaropoulos
#+DATE:        Sunday 21 February 2016
#+EMAIL:       cperivol@csail.mit.edu
#+DESCRIPTION: START's backend for wikipedia
#+KEYWORDS:
#+LANGUAGE:    en
#+OPTIONS:     H:2 num:t toc:t \n:nil @:t ::t |:t ^:t f:t TeX:t
#+STARTUP:     showall

* Introduction

  WikipediaBase base is a backend to START responsible for providing
  access to wikipedia related information. The WikipediaBase we refer
  to is a python rewrite of the now deprecated Ruby WikipediaBase.


* People

  # TODO: rephrase this
  The python implementation was initially written by Chris
  Perivolaropoulos and was eventually handed over to

  - Alvaro Morales
  - Michael Silver
  # TODO: add the rest of the people


* Functionality

  #+INCLUDE: functionality.org

* Getting started

  The WikipediaBase implementation that we refer to is written in
  python. Previous implementations were written in Java and Ruby but
  the language of choice for the rewrite was python for multiple
  reasons:


  - Python is in the pre-graduate curriculum of MIT computer science
    department. This will ease the learning curve of new members of
    Infolab.
  - Python is a easy to learn and mature language with a rich and
    evolving ecosystem. This fact eases the introduction of new
    maintainers even further.


   The entire WikipediaBase resides in a git repository in infolab's
   github orginization page

   #+BEGIN_SRC sh
   git clone git@github.com:infolab-csail/WikipediaBase
   #+END_SRC


   WikipediaBase depends on multiple other python
   packages. Fortunately, python is shipped not only with a great
   package manager, but also with a mechanism called virtualenv that
   isolates installations of a project's dependencies from the rest of
   the system, thus avoiding problems like version or namespace
   collisions. The way this effectively works is that the global
   python installation is half copied half symlinked to a local
   directory and the dependencies are installed only in the local
   sandbox. To create and activate a python virtualenv:

   #+BEGIN_SRC sh
   $ virtualenv --no-site-packages py
   $ . py/bin/activate
   $ which python
   /the/local/directory/py/bin/python
   #+END_SRC

   Now that we can safely install anything we want without breaking
   any global installation

   #+BEGIN_SRC sh
   pip install -r requirements.txt
   #+END_SRC

   We will need some extra stuff for WikipediaBase to work:

   - Postresql
   - Redis

   The installation process of these packages varies across
   platforms. Both are databases. Their purpose is for caching
   repeated computations and for storing ahead-of-time computation
   like infobox markup name to rendered name maps and synonyms.

* Architecture

  #+INCLUDE: architecture.org

* Provider/Acquirer model

  WikipediaBase attempts to be modular and extendible. To accomplish
  this it is often useful to multiplex multiple sources of the same
  type of data resource. This is particularly useful when accessing
  heuristic methods like classifier. To promote modularity and to
  avoid hard dependencies the provider/acquirer model was created:

  A =Provider= is an object though which we can access resources that
  are stored in a key-value fashion. The =Provider= class offers
  facilities like decorators to make this provision easy. An
  =Acquirer= has transparent access to the resources of multiple
  =Provider= s as if they were a single key value store. This pattern
  is most notably used for the =KnowledgeBase= to provide the
  =Frontend= with the way of accessing resoruces.


** TODO Example

* Testing
** Unit testing

   The good functioning of WikipediaBase is assured by a
   comprehensive test suite of unit tests, functional tests and
   regression tests.

*** Unit tests

    Unit tests test small blocks of functionality, that are composed
    to create the system at large. For unit testing we use python's
    default testing library. Each test is a class the subclasses

*** Functional and regression tests

    Functional tests are tests written before, during or shortly
    after the development of a system and they assert the correct
    overall functioning of the system. Regression tests are very akin
    to functional tests. They prove that a found bug was fixed and
    assert that it will not appear again later. Functional and
    regression tests currently reside in =tests/examples.py=

** TODO Examples
* Synonyms
** Good/Bad synonyms
** Synonym generation
* Backend databases
** DBM
** SQLite
** Redis
** Postgres
* Data sources
* Date parser
  #+INCLUDE: dateparsχβψωer.org
* Future
** Configuration
*** Persistence
*** Pass by reference
*** Lenses
*** Laziness
**** Referential (Ref - Items)
**** Computational
** START deployment
** Test suites
** Bugs
** Answer hierarchy
