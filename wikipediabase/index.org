#+TITLE:       WikipediaBase
#+AUTHOR:      Chris Perivolaropoulos
#+DATE:        Sunday 21 February 2016
#+EMAIL:       cperivol@csail.mit.edu
#+DESCRIPTION: START's backend for wikipedia
#+KEYWORDS:
#+LANGUAGE:    en
#+OPTIONS:     H:2 num:t toc:t \n:nil @:t ::t |:t ^:t f:t TeX:t
#+STARTUP:     showall
#+MACRO:       refg


WikipediaBase is a backend to START responsible for providing access
to wikipedia related information, that mimics the API interface
provided by the Omnibase. Wikipediabase has gone through a couple of
rewrites. The initial version was written in Java. It was then
rewritten in Ruby copying the original architecture and design and now
it is rewritten in python and rearchitectured from scratch. There are
two main reasons for this: python is taught as a pre-graduate course
in MiT, and therefore a Python codebase will make initiation of new
MiT students smoother and, more importantly, while the initial design
of the previous WikipediaBase should have been adequate, it grew to a
point where the code was ad-hoc and hard to understand, reason about
and extend.

The python implementation was initially written by Chris
Perivolaropoulos in close association with Dr Sue Felshin and was
eventually handed over to Sue Felshin, Alvaro Morales and Michael
Silver. Other students have also joined the project shortly after.

* Functionality

  #+INCLUDE: functionality.org

* Getting started

  The entire WikipediaBase resides in a git repository in infolab's
  github orginization page

  #+BEGIN_SRC sh
     git clone git@github.com:infolab-csail/WikipediaBase
  #+END_SRC


  WikipediaBase depends on multiple other python
  packages. Fortunately, python is shipped not only with a great
  package manager, but also with a mechanism called virtualenv that
  isolates installations of a project's dependencies from the rest of
  the system, thus avoiding problems like version or namespace
  collisions. The way this effectively works is that the global
  python installation is half copied half symlinked to a local
  directory and the dependencies are installed only in the local
  sandbox. To create and activate a python virtualenv:

  #+BEGIN_SRC sh
   $ virtualenv --no-site-packages py
   $ . py/bin/activate
   $ which python
   /the/local/directory/py/bin/python
  #+END_SRC

  Now that we can safely install anything we want without breaking
  any global installation

  #+BEGIN_SRC sh
   pip install -r requirements.txt
  #+END_SRC

  We will need some extra stuff for WikipediaBase to work:

  - Postresql
  - Redis

  The installation process of these packages varies across
  platforms. Both are databases. Their purpose is for caching repeated
  computations and for storing ahead-of-time computation like infobox
  markup, name to rendered name maps, and synonyms.

* Architecture

  #+INCLUDE: architecture.org

* Provider/Acquirer model

  #+INCLUDE: provider.org

* Testing
** Unit testing

   The good functioning of WikipediaBase is assured by a
   comprehensive test suite of unit tests, functional tests and
   regression tests.

*** Unit tests

    Unit tests test small blocks of functionality, that are composed
    to create the system at large. For unit testing we use python's
    default testing library. Each test is a class that implements the
    =TestCase= interface.

*** Functional and regression tests

    Functional tests are tests written before, during or shortly
    after the development of a system and they assert the correct
    overall functioning of the system. Regression tests are very akin
    to functional tests. They prove that a found bug was fixed and
    assert that it will not appear again later. Functional and
    regression tests currently reside in =tests/examples.py=

** Examples

   Virtually all tests begin with the following snippet:

   #+BEGIN_SRC python
     from __future__ import unicode_literals

     try:
         import unittest2 as unittest
     except ImportError:
         import unittest

     from wikipediabase import fetcher
   #+END_SRC

   The above is specific for the =fetcher= module. As is apparent we
   are using the =unittest= module from the standard python
   library. The test itself has the following format:

   #+BEGIN_SRC python
     class TestFetcher(unittest.TestCase):

         def setUp(self):
             self.fetcher = fetcher.get_fetcher()

         def test_html(self):
             html = self.fetcher.html_source("Led Zeppelin")
             self.assertIn("Jimmy Page", html)

   #+END_SRC

   The =setUp= method runs before each test of the =TestCase=. Tests
   of the testcase are represented by methods of the class whose name
   begins with =test_=. In this particular case we are getting the
   wikipedia page for Led Zeppelin and making sure the name of Jimmy
   Page is mentioned at least once. This is obviously not conclusive
   that fetcher did not for example bring up the page for /The
   Yardbirds/, Page's first band. For this reason we write a couple of
   these sort of tests. For the entire test see the Python test
   example in the appendix.

** Running tests

   We employ the =nosetests= tool to find and run our tests. To do so
   we add a test requirement in =setup.py= and assign =nose.collector=
   to manage our test suite:

   #+BEGIN_SRC python
     from setuptools import setup

     setup(
         tests_require=[
             'nose>=1.0',
             ...
         ],
         ...
         test_suite='nose.collector',
         ...
     )
   #+END_SRC

   Then to run the tests

   #+BEGIN_SRC sh
     $ python setup.py test
   #+END_SRC

   Nose will find all files that are in =tests/= and have the prefix
   =test_=, for example =test_fetcher.py=. Inside those files nose
   looks into classes that subclass =TestCase= and whose name begins
   with =Test=, for example =TestFetcher=. It then runs all methods of
   the collected classes that have the =test_= prefix.

   It is also possible to run specific tests.

   #+BEGIN_SRC sh
     $ python setup.py test --help
     Common commands: (see '--help-commands' for more)

       setup.py build      will build the package underneath 'build/'
       setup.py install    will install the package

     Global options:
       --verbose (-v)  run verbosely (default)
       --quiet (-q)    run quietly (turns verbosity off)
       --dry-run (-n)  don't actually do anything
       --help (-h)     show detailed help message
       --no-user-cfg   ignore pydistutils.cfg in your home directory

     Options for 'test' command:
       --test-module (-m)  Run 'test_suite' in specified module
       --test-suite (-s)   Test suite to run (e.g. 'some_module.test_suite')
       --test-runner (-r)  Test runner to use

     usage: setup.py [global_opts] cmd1 [cmd1_opts] [cmd2 [cmd2_opts] ...]
        or: setup.py --help [cmd1 cmd2 ...]
        or: setup.py --help-commands
        or: setup.py cmd --help
   #+END_SRC

   See the appendix for the full output of a successful test run.

* Synonyms

  Before we talk about synonyms it is important to concretely define
  symbols in the context of the omnibase universe:

  #+BEGIN_QUOTE
  Symbols are identifiers of "objects" in a data source. (The term
  "symbol" is unfortunate, since it has so many meanings in computer
  science, but we're stuck with it for historical reasons.)
  #+END_QUOTE

  Since language tends to have multiple ways of referring to the same
  things, defining aliases for symbols is imperative.

  #+BEGIN_QUOTE
  Synonyms are names which users can use to refer to symbols. (The
  term "synonym" is unfortunate, because this is really a one-way
  mapping -"gloss" would be a better term but we're stuck with
  "synonym" for historical reasons.)
  #+END_QUOTE

  The definition of synonyms is the job of the backend
  itself. Therefore it is the job of WikipediaBase to define the set
  of synonyms required.

** Good/Bad synonyms

   There are rules to what is considered a good and what a bad
   synonym. In short synonyms:

   - Should not lead with articles ("the", "a", "an")
   - Should not lead with "File:" or "TimedText:".
   - Should not fragment anchors. Eg "Alexander_Pushkin#Legacy"
   - Should not start with the following:
     - "List of "
     - "Lists of "
     - "Wikipedia: "
     - "Category: "
     - ":Category: "
     - "User: "
     - "Image: "
     - "Media: "
     - "Arbitration in location"
     - "Communications in location"
     - "Constitutional history of location"
     - "Economy of location"
     - "Demographics of location"
     - "Foreign relations of location"
     - "Geography of location"
     - "History of location"
     - "Military of location"
     - "Politics of location"
     - "Transport in location"
     - "Outline of topic"

   - Should not match =\d\d\d\d in location= or =location in \d\d\d\d=
   - Should not be names of disabiguation pages. To make this
     inclusive for all relevant pages, including typos, that means
     symbols that match =\([Dd]isambig[^)]*\)=
   - Synonyms that both a) could be mistaken for ones that start with
     articles and b) might subsume something useful. That means that
     for example "A. House" (synonym of "Abraham House") is
     disqualified because it might mislead START in the case of
     questions like "How much does a house cost in the Silicon
     Valley?". On the other hand "a priori" can be kept because there
     are no sensible queries where "a" is an article before "priori".

** Synonym generation

   To accommodate these restrictions two approaches are employed:
   disqualification of synonym candidates and modification of synonym
   candidates. Modification is attempted first, and if that fails we
   disqualify. The rules for modification are as follows:

   - Strip determiners (articles) that are at the beginning of a
     synonym (or would be at the beginning if not for punctuation):
     - "A "
     - "An "
     - "The "
     - '(The) '
     - The&nbsp;
     - etc.

   - Generate both versions, with and without paren. Eg given symbol
     "Raven (journal)" generate both:
     - "Raven (journal)"
     - "Raven"

   - Generate before and after slash, but not the original symbol, e.g.:
     - Given symbol "Russian language/Russian alphabet" generate both
       - "Russian language"
       - "Russian alphabet"

   - Reverse inverted synonyms with commas. Eg given synonym "Congo,
     Democratic Republic Of The" invert it to get "Democratic
     Republic Of The Congo"

   - As usual, get rid of leading articles if necessary. Eg given
     synonym "Golden ratio, the" replace it with "the Golden ratio",
     then strip articles to get: "Golden ratio" same goes for a, an,
     etc.

   This way we generate an initial set of synonyms from the name of
   the object itself. Furthermore we can generate a set of synonyms
   from wikipedia redirects to the article. Wikipedia kindly provides
   an SQL dump for all redirects.

   To load the table, in your database where you have loaded the
   wikipedia data, you should load the redirects table:

   #+BEGIN_SRC sh
     wget https://dumps.wikimedia.org/enwiki/latest/enwiki-latest-redirect.sql.gz \
       -O redirect.sql.gz && gzcat redirect.sql.gz | mysql
   #+END_SRC

   And then from the SQL db to find all (good and bad) synonyms to
   Bill Clinton you can run

   #+BEGIN_SRC sql
     select page_title, rd_title from redirect join page on rd_from = page_id and (rd_title = "Bill_Clinton" or page_title = "Bill_Clinton");
   #+END_SRC

   For the full output see the appendix.

* Databases and data sources

  Wikipediabase uses primarily a remote data store that implements the
  mediawiki HTTP interface and attempts to deal with the arising
  performance issues by aggressively caching pages to a backend
  key-value based database. The interface with the database is
  abstracted by using a python-style dictionary interface, which is
  implemented in =persistentkv.py=. Implemented backends are presented
  below, but it is trivial to provide any backend one can come up
  with.

** Data access

   Data access is abstraced by the ad-hoc =Fetcher=
   interface. Currently the only useful fetcher implemented is the
   =CachingSiteFetcher= that supports retrieval of both mediawiki
   markup and rendered HTML for each page while caching all retrieved
   data.

*** HTML and MediaWiki API

    The initial approach to getting the data is to retrieve the normal
    HTML versions of wikipedia articles and using edit pages to
    retrieve the mediawiki markup. We invariably use the original
    wikipedia.org site for performance reasons (See wikipedia-mirror
    runtime performance section).

    Mediawiki provides a RESTful API for all the required
    functionality. The basic premise is that one can send requests with
    =POST= or =GET= methods and get a response formulated in XML or
    JSON. The preferred response type for WikipediaBase was sending
    =GET= HTTP requests to receive =JSON= data. =GET= was selected
    because it is explicitly suggested in the mediawiki API page
    because caching happens at the HTTP level.

    #+BEGIN_QUOTE
    Per the HTTP specification, POST requests cannot be
    cached. Therefore, whenever you're reading data from the web
    service API, you should use GET requests, not POST.

    Also note that a request cannot be served from cache unless the URL is
    exactly the same. If you make a request for
    api.php?....titles=Foo|Bar|Hello, and cache the result, then a request
    for api.php?....titles=Hello|Bar|Hello|Foo will not go through the
    cache  even though MediaWiki returns the same data!
    #+END_QUOTE

    =JSON= was selected simply because the python =json= package in the
    standard library is much easier to use than =lxml=, the library we
    use for XML/HTML parsing.

*** Dumps / Database

    Direct interface with a local database, besides caching using mdb
    and/or sqlite was not implemented as part of the thesis. However
    shortly after caching and compile time data pools in redis and
    postrgres were implemented.

** Caching

   As mentioned WikipediaBase abstracts the caching mechanism
   functionally to a key-value storage object that behaves like a
   python dictionary plus an extra =sync= method for explicit
   flushing. However that is not all, another feature that the
   interface to the database should be able to handle is the encoding
   of the saved objects. Because virtually all of the stored data is
   text, the underlying database should be able to reliably retrieve
   exactly the text that was saved, taking into account the
   encoding. Because of DBM's limitation that keys of the DBM database
   should only be ASCII encoded, the base class for interfacing with
   the database, =EncodedDict=, implements the =_encode_key= and
   =_decode_key= methods (that default to identity functions) to
   provide an easy hook for implementations to deal with this possible
   issue.

*** DBM

    As mentioned before for caching several dbm implementations are
    provided by the python standard library. None of the
    implementations shipped with python are part of the python
    standard library itself however. Some of the DBM implementations
    that are available via the standard python library are:

    - AnyDBM
    - GNU DBM
    - Berkeley DBM

    It is worth noting that the performance and smooth functioning of
    these libraries is highly dependent on the underlying platform.

    As mentioned above, the interface classes to DBM transcode keys to
    ASCII. The precise way that is done is:

    #+BEGIN_SRC python
     def _encode_key(self, key):
         if isinstance(key, unicode):
             return key.encode('unicode_escape')

         return str(key)

     def _decode_key(self, key):
         return key.decode('unicode_escape')
    #+END_SRC

*** SQLite

    SQLite was also considered as caching backend
    database. Unfortunately its performance for our particular purpose
    was disappointing.

    We used a very thin wrapper, =sqlitedict=, to get a key-value
    interface to SQLite -- a relational database. The related
    WikipediaBase code is very short:

    #+BEGIN_SRC python
    from sqlitedict import SqliteDict

      class SqlitePersistentDict(EncodedDict):
          def __init__(self, filename, configuration=configuration):
              if not filename.endswith('.sqlite'):
                  filename += '.sqlite'

              db = SqliteDict(filename)
              super(SqlitePersistentDict, self).__init__(db)

          def sync(self):
    self.db.close()
    super(SqlitePersistentDict, self).sync()
    #+END_SRC

    Below are two benchmark functions that will read/write 100000 times
    to a key-value database.

    #+BEGIN_SRC python
    def benchmark_write(dic, times=100000):
          for i in xrange(times):
              dic['o' + str(i)] = str(i) * 1000

      def benchmark_read(dic, times=100000):
          for i in xrange(times):
    dic['o' + str(i)]
    #+END_SRC

    And here they are run over memory based =tmpfs= on debian.

    #+BEGIN_SRC python
      >>> import timeit
      >>> sqlkv = SqlitePersistentDict('/tmp/bench1.sqlite')
      >>> timeit.timeit(lambda : benchmark_write(sqlkv), number=100)
      10.847157955169678
      >>> timeit.timeit(lambda : benchmark_read(sqlkv), number=100)
      18.88098978996277
      >>> dbmkv = DbmPersistentDict('/tmp/bench.dbm')
      >>> timeit.timeit(lambda : benchmark_write(dbmkv), number=100)
      0.18030309677124023
      >>> timeit.timeit(lambda : benchmark_read(dbmkv), number=100)
      0.14914202690124512
    #+END_SRC

    The DBM database is nearly 10 times faster than sqlite. The
    difference in performance is due to the different committing
    policies of the two. It might be possible to calibrate SQLite to be
    as fast as DBM but not in any trivial way.

*** Other backends

    Other backends were considered, most notably Redis which was
    actually implemented shortly after the project handoff by Alvaro
    Morales. The reason we did not initially use it was that it is
    modeled as a server-client which adds complexity to an aspect of
    the system that should be as simple as possible. Another reason for
    our initial skepticism towards third party -- ie. not shipped with
    python -- databases was to avoid extra dependencies, especially
    when they are the cool database du jour.

* Date parser
  #+INCLUDE: dateparser.org

* Appendix

** Python unit test example

   #+BEGIN_SRC python
     class TestFetcher(unittest.TestCase):
         def setUp(self):
             self.fetcher = fetcher.get_fetcher()

         def test_html(self):
             html = self.fetcher.html_source("Led Zeppelin")
             self.assertIn("Jimmy Page", html)

         def test_markup_source(self):
             src = self.fetcher.markup_source("Led Zeppelin")
             self.assertIn("{{Infobox musical artist", src)


         def test_unicode_html(self):
             html = self.fetcher.html_source(u"Rhône")
             self.assertIn("France", html)

         def test_unicode_source(self):
             src = self.fetcher.markup_source("Rhône")
             self.assertIn("Geobox|River", src)

         def test_silent_redirect(self):
             # redirects are only supported when force_live is set to True
             src = self.fetcher.markup_source("Obama", force_live=True)
             self.assertFalse(re.match(fetcher.REDIRECT_REGEX, src))
   #+END_SRC

** Python test runs


   #+BEGIN_SRC sh
     $ python setup.py test -s tests.test_lispify
     running test
     running egg_info
     writing requirements to wikipediabase.egg-info/requires.txt
     writing wikipediabase.egg-info/PKG-INFO
     writing top-level names to wikipediabase.egg-info/top_level.txt
     writing dependency_links to wikipediabase.egg-info/dependency_links.txt
     writing entry points to wikipediabase.egg-info/entry_points.txt
     reading manifest file 'wikipediabase.egg-info/SOURCES.txt'
     reading manifest template 'MANIFEST.in'
     writing manifest file 'wikipediabase.egg-info/SOURCES.txt'
     running build_ext
     test_bool (tests.test_lispify.TestLispify) ... ok
     test_bool_with_typecode (tests.test_lispify.TestLispify) ... ok
     test_date_multiple_voting (tests.test_lispify.TestLispify) ... ok
     test_date_simple (tests.test_lispify.TestLispify) ... ok
     test_date_with_range (tests.test_lispify.TestLispify) ... ok
     test_dict (tests.test_lispify.TestLispify) ... ok
     test_dict_with_escaped_string (tests.test_lispify.TestLispify) ... ok
     test_dict_with_list (tests.test_lispify.TestLispify) ... ok
     test_double_nested_list (tests.test_lispify.TestLispify) ... ok
     test_error (tests.test_lispify.TestLispify) ... ok
     test_error_from_exception (tests.test_lispify.TestLispify) ... ok
     test_keyword (tests.test_lispify.TestLispify) ... ok
     test_keyword_with_typecode (tests.test_lispify.TestLispify) ... ok
     test_list (tests.test_lispify.TestLispify) ... ok
     test_list_of_dict (tests.test_lispify.TestLispify) ... ok
     test_list_of_dict_with_typecode (tests.test_lispify.TestLispify) ... ok
     test_list_with_typecode (tests.test_lispify.TestLispify) ... ok
     test_nested_list (tests.test_lispify.TestLispify) ... ok
     test_none (tests.test_lispify.TestLispify) ... ok
     test_none_with_typecode (tests.test_lispify.TestLispify) ... ok
     test_number (tests.test_lispify.TestLispify) ... ok
     test_number_with_typecode (tests.test_lispify.TestLispify) ... ok
     test_string (tests.test_lispify.TestLispify) ... ok
     test_string_escaped (tests.test_lispify.TestLispify) ... ok
     test_string_not_keyword (tests.test_lispify.TestLispify) ... ok
     test_string_with_typecode (tests.test_lispify.TestLispify) ... ok
     test_unicode_string (tests.test_lispify.TestLispify) ... ok

     ----------------------------------------------------------------------
     Ran 27 tests in 0.047s

     OK
   #+END_SRC

** Quickly finding synonyms with MySQL example


   #+BEGIN_SRC sql
     mysql> select page_title, rd_title from \
     redirect join page on
     rd_from = page_id and
     (rd_title = "Bill_Clinton" or page_title = "Bill_Clinton");
     +-------------------------------------+--------------+
     | page_title                          | rd_title     |
     +-------------------------------------+--------------+
     | BillClinton                         | Bill_Clinton |
     | William_Jefferson_Clinton           | Bill_Clinton |
     [.. see below for a formated verison of the data ...]
     | William_Jefferson_Clinton           | Bill_Clinton |
     +-------------------------------------+--------------+
     46 rows in set (11.77 sec)
   #+END_SRC


   #+ATTR_LATEX: :environment longtable
   | =page_title=                          | =rd_title=     |
   |---------------------------------------+----------------|
   | =BillClinton=                         | =Bill_Clinton= |
   | =William_Jefferson_Clinton=           | =Bill_Clinton= |
   | =President_Clinton=                   | =Bill_Clinton= |
   | =William_Jefferson_Blythe_IV=         | =Bill_Clinton= |
   | =Bill_Blythe_IV=                      | =Bill_Clinton= |
   | =Clinton_Gore_Administration=         | =Bill_Clinton= |
   | =Buddy_(Clinton's_dog)=               | =Bill_Clinton= |
   | =Bill_clinton=                        | =Bill_Clinton= |
   | =William_Jefferson_Blythe_III=        | =Bill_Clinton= |
   | =President_Bill_Clinton=              | =Bill_Clinton= |
   | =Bull_Clinton=                        | =Bill_Clinton= |
   | =Clinton,_Bill=                       | =Bill_Clinton= |
   | =William_clinton=                     | =Bill_Clinton= |
   | =42nd_President_of_the_United_States= | =Bill_Clinton= |
   | =Bill_Jefferson_Clinton=              | =Bill_Clinton= |
   | =William_J._Clinton=                  | =Bill_Clinton= |
   | =Billl_Clinton=                       | =Bill_Clinton= |
   | =Bill_Clinton\=                       | =Bill_Clinton= |
   | =Bill_Clinton's_Post_Presidency=      | =Bill_Clinton= |
   | =Bill_Clinton's_Post-Presidency=      | =Bill_Clinton= |
   | =Klin-ton=                            | =Bill_Clinton= |
   | =Bill_J._Clinton=                     | =Bill_Clinton= |
   | =William_Jefferson_"Bill"_Clinton=    | =Bill_Clinton= |
   | =William_Blythe_III=                  | =Bill_Clinton= |
   | =William_J._Blythe=                   | =Bill_Clinton= |
   | =William_J._Blythe_III=               | =Bill_Clinton= |
   | =Bil_Clinton=                         | =Bill_Clinton= |
   | =WilliamJeffersonClinton=             | =Bill_Clinton= |
   | =William_J_Clinton=                   | =Bill_Clinton= |
   | =Bill_Clinton's_sex_scandals=         | =Bill_Clinton= |
   | =Billy_Clinton=                       | =Bill_Clinton= |
   | =Willam_Jefferson_Blythe_III=         | =Bill_Clinton= |
   | =William_"Bill"_Clinton=              | =Bill_Clinton= |
   | =Billll_Clinton=                      | =Bill_Clinton= |
   | =Bill_Klinton=                        | =Bill_Clinton= |
   | =William_Clinton=                     | =Bill_Clinton= |
   | =Willy_Clinton=                       | =Bill_Clinton= |
   | =William_Jefferson_(Bill)_Clinton=    | =Bill_Clinton= |
   | =Bubba_Clinton=                       | =Bill_Clinton= |
   | =MTV_president=                       | =Bill_Clinton= |
   | =MTV_President=                       | =Bill_Clinton= |
   | =The_MTV_President=                   | =Bill_Clinton= |
   | =Howard_G._Paster=                    | =Bill_Clinton= |
   | =Clintonesque=                        | =Bill_Clinton= |
   | =William_Clinton=                     | =Bill_Clinton= |
   | =William_Jefferson_Clinton=           | =Bill_Clinton= |

** Article categories example

   For example Leonardo DiCaprio's page has the following categories.
   Highlighted is the category that tells wikipediabase that Leonardo
   DiCaprio is a person:

   - Leonardo DiCaprio
   - 1974 births
   - *Living people*
   - 20th-century American male actors
   - 21st-century American male actors
   - American environmentalists
   - American film producers
   - American male child actors
   - American male film actors
   - American male soap opera actors
   - American male television actors
   - American people of German descent
   - American people of Italian descent
   - American people of Russian descent
   - American philanthropists
   - Best Actor AACTA Award winners
   - Best Actor Academy Award winners
   - Best Drama Actor Golden Globe (film) winners
   - Best Musical or Comedy Actor Golden Globe (film) winners
   - California Democrats
   - Film producers from California
   - Formula E team owners
   - Male actors from Hollywood, California
   - Male actors from Palm Springs, California
   - Male actors of Italian descent
   - People from Echo Park, Los Angeles
   - Silver Bear for Best Actor winners

   This looks like this on the wikipedia page.

   #+CAPTION: The rendered list of categores for Leonardo DiCaprio
   #+NAME:   fig:dicaprio-categories
   #+attr_latex: :placement [H] :width \textwidth
   [[./dicaprio_categories.png]]
