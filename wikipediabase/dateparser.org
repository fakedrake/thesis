#+TITLE:       Wikipediabase Date Parser
#+AUTHOR:      Chris Perivolaropoulos
#+DATE:        Sunday 21 February 2016
#+EMAIL:       cperivol@csail.mit.edu
#+DESCRIPTION: The date parsing package for wikipediabase
#+KEYWORDS:
#+LANGUAGE:    en
#+OPTIONS:     H:2 num:t toc:t \n:nil @:t ::t |:t ^:t f:t TeX:t
#+STARTUP:     showall

=dateparser= resides in a separate package called overlay-parse

* Parsing with overlays

  The concept of an overlay was inspired by emacs overlays. They are
  objects that specify the behavior of a subset of a text, by
  assigning properties to it, making for example text clickable or
  highlighted. An overlay over part of text \(t\) in our context is

  - a tuple representing the range within that text
  - a set of tags that define semantic sets that the said substring is
    a member of
  - arbitrary information (of type \(A\)) that the underlying text
    describes.

  More formally:

  #+BEGIN_EXPORT latex
  \begin{align*}
  & o_i \in TextRange\(t\) \times Set(Tag) \times A \\
  & Text \rightarrow \left\{o_1, o_2, ..., o_n\right\}
  \end{align*}
  #+END_EXPORT

  So for example out of the text

  #+BEGIN_EXPORT latex
  \[
  The\,weather\,today,\,
  \overbrace{Tuesday}^\text{\(o_1\)} \,
  \overbrace{21^{st}}^\text{\(o_2\)} \, of \,
  \overbrace{November}^\text{\(o_3\)} \,
  \overbrace{2016}^\text{\(o_4\)}, \, was \, sunny.
  \]
  #+END_EXPORT

  We can extract overlays \(\left\{o_1, ... , o_4\right\}\), so that

  #+BEGIN_EXPORT latex
  \[
  \begin{array}[b]{rlll}
  o_1 = (&r("Tuesday"),  & \{\mathrm{DayOfWeek}, \mathrm{FullName}\}, & 2) \\
  o_2 = (&r("21^{st}"),   & \{\mathrm{DayOfMonth}, \mathrm{Numeric}\}, & 21) \\
  o_3 = (&r("November"), & \{\mathrm{Month}, \mathrm{FullName} \}, & 11) \\
  o_4 = (&r("2016"),     & \{\mathrm{Year}, \mathrm{4digit} \}, & 2016)
  \end{array}
  \]
  #+END_EXPORT

  Notice how for all overlays of the example we have \(A =
  \mathbb{N}\), as we encode day of the week, day of the month,
  month and year as natural numbers. We encode more precise type
  information (ie that a day is inherently different than a month)
  in the tag set.

  Once we have a set of overlays we can define overlay sequences as
  overlays whose ranges are consecutive, that is their tag sets match
  particular patterns. For example we can search for sequences of
  overlays that match the pattern

  \[
  p = \mathrm{DayOfMonth}, \mathrm{Separator(/)}, (\mathrm{Month} \wedge \mathrm{Number}), \mathrm{Separator(/)}, \mathrm{Year}
  \]

  to match patterns like \(22/07/1991\), where \(Separator(/)\)
  matches only the character "/"


* The dates example

  The working example and motivation of the package is date
  parsing. The =dates= submodule exposes two main entry points:

  - =just_dates= that looks for dates in a text.
  - =just_ranges= that looks for data ranges in a corpus.

  Below are presented some examples. Note that =0= means =unspecified=

  #+BEGIN_SRC python
    >>> from overlay_parse.dates  import just_dates, just_ranges, just_props
    >>> just_dates("Timestamp: 22071991: She said she was \
            coming on april the 18th, it's 26 apr 2014 and hope is leaving me.")
    ... [(22, 7, 1991), (18, 4, 0), (26, 4, 2014)]
    >>> dates = just_dates("200 AD 300 b.c.")
    >>> just_dates("200 AD 300 b.c.")
    [(0, 0, 200), (0, 0, -300)]
    >>> just_ranges(u"I will be there from 2008 to 2009")
    [((0, 0, 2008), (0, 0, 2009))]
    >>> just_ranges("I will stay from July the 20th until today")
    [((20, 7, 0), (29, 4, 2016))]
    >>> just_dates('{{Birth date and age|1969|7|10|df=y}}')
    [(10, 7, 1969)]
    >>> just_ranges(u'German: [\u02c8v\u0254lf\u0261a\u014b ama\u02c8de\u02d0\u028as \u02c8mo\u02d0tsa\u0281t], English see fn.;[1] 27 January 1756\xa0\u2013 5 December 1791')
    [((27, 1, 1756), (5, 12, 1791))]
  #+END_SRC
